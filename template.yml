AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Messenger Stack

Parameters:
  ApplicationName:
    Type: String
    Default: 'messenger'

Resources:
  WebSocketApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '/', [ '/aws/apigateway', !Ref ApplicationName ] ]
      RetentionInDays: 1

  WebSocketApiGateway:
    Type: AWS::ApiGatewayV2::Api
    DependsOn: 'WebSocketApiGatewayLogGroup'
    Properties:
      Name: !Ref ApplicationName
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: dev
      AutoDeploy: true
      ApiId: !Ref WebSocketApiGateway

  MessengerOnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: hrach-lambda-dev-build
        Key: messenger.onconnect.zip
      Handler: bootstrap
      FunctionName: messenger-onconnect
      Architectures:
        - x86_64
      Runtime: provided.al2023
      Timeout: 30
      MemorySize: 128
      AutoPublishAlias: live
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - apigateway:POST
                - apigateway:GET
                - apigateway:PATCH
                - apigateway:PUT 
                - dynamodb:BatchWriteItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:GetItem
                - dynamodb:Query
              Resource:
                - '*'                            


  MessengerOnConnectFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: 'MessengerOnConnectFunction'
    Properties:
      RetentionInDays: 1
      LogGroupName: !Join [ '', [ '/aws/lambda/', !Ref MessengerOnConnectFunction ] ]
  
  MessengerOnConnectInvokePermission:
    Type: "AWS::Lambda::Permission"
    DependsOn: MessengerOnConnectFunction
    Properties:
      FunctionName:
        Ref: "MessengerOnConnectFunction"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiGateway}/*' 
  
  MessengerOnConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApiGateway
      Description: OnConnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessengerOnConnectFunction.Arn}/invocations
  MessengerOnConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApiGateway
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: OnConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref MessengerOnConnectIntegration
  
  MessengerOnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: hrach-lambda-dev-build
        Key: messenger.ondisconnect.zip
      Handler: bootstrap
      FunctionName: messenger-ondisconnect
      Architectures:
        - x86_64
      Runtime: provided.al2023
      Timeout: 30
      MemorySize: 128
      AutoPublishAlias: live
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - apigateway:POST
                - apigateway:GET
                - apigateway:PATCH
                - apigateway:PUT 
                - dynamodb:BatchWriteItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:GetItem
                - dynamodb:Query
              Resource:
                - '*'                            

  MessengerOnDisconnectFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: 'MessengerOnDisconnectFunction'
    Properties:
      RetentionInDays: 1
      LogGroupName: !Join [ '', [ '/aws/lambda/', !Ref MessengerOnDisconnectFunction ] ]
  
  MessengerOnDisconnectInvokePermission:
    Type: "AWS::Lambda::Permission"
    DependsOn: MessengerOnDisconnectFunction
    Properties:
      FunctionName:
        Ref: "MessengerOnDisconnectFunction"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiGateway}/*' 
  
  MessengerOnDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApiGateway
      Description: OnDisconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessengerOnDisconnectFunction.Arn}/invocations
  
  MessengerOnDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApiGateway
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: OnDisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref MessengerOnDisconnectIntegration
  
  MessengerDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'messenger'
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions:
        - AttributeName: 'pk'
          AttributeType: 'S'
        - AttributeName: 'sk'
          AttributeType: 'S' 
        - AttributeName: 'gsi1pk'
          AttributeType: 'S'
        - AttributeName: 'gsi1sk'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'pk'
          KeyType: HASH
        - AttributeName: 'sk'
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: 'gsi1'
          KeySchema:
            - AttributeName: 'gsi1pk'
              KeyType: HASH
            - AttributeName: 'gsi1sk'
              KeyType: RANGE  
          Projection:
            ProjectionType: ALL
